---
title: "Lesson 2: Working with data frames"
format: revealjs
execute:
  echo: true
  eval: false
---

## Lesson 2 learning objectives

At the end of this lesson, students will ...

- Read a CSV file of data into the R workspace.
- Know what a data frame is and understand what constitutes "tidy" data.
- Do basic manipulations and reshaping of data frames.
- Calculate summary statistics by group.

## What is a data frame?

- A data frame corresponds to a table or spreadsheet of data
- Each column has its own data type 
- Ideally, each row will correspond to an individual observation
- Workhorses of data manipulation and analysis

## Note about tidyverse

- This lesson features functions from the **tidyverse** group of packages
- tidyverse is are a set of packages, designed to work together, that make it easy to wrangle and manipulate data in R
- Alternatives would be using base R code or **data.table**
- tidyverse is probably easiest for beginners and very widespread
- I recommend starting here and learning other ways as you get better at R

```{r, message = FALSE}
library(tidyverse)
```

## Reading in data

- If you are using RStudio on the cloud, the file `small_mammals.csv` is included in the `datasets` folder
- If running locally, replace `datasets` with the file path on your system
- For example `C:/Users/yourname/Documents/r_workshop_datasets/small_mammals.csv`
- Notice that `/` (forward slash) is used, even on Windows!
- Use `read_csv()` from the tidyverse package **readr**
- This returns a "tibble," tidyverse's name for a special class of data frame

```{r}
dat <- read_csv('datasets/small_mammals.csv')
```

## Small mammal dataset

- Body measurements of small mammals from the NEON ecological observatory network 

![Myodes gapperi](https://upload.wikimedia.org/wikipedia/commons/thumb/d/d7/Myodes_gapperi_91047357.jpg/640px-Myodes_gapperi_91047357.jpg)

## Summary information about a data frame

- Type the name of the data frame into our console
- Prints the first few rows and some information about dimensions

```{r}
dat
```

- We can print all the values of `dat` if we explicitly tell R to do this
- Or print a specified number of rows

```{r}
print(dat, n = 50)
```

## Other ways to summarize data frames

- `summary()` and `str()` from base R
- `glimpse()` from tidyverse
- Try calling them and see what output you get
- We can see we have 1629 rows and 7 columns. 
- Some character columns (`chr`) and numeric columns (`dbl` for double-precision)
- `summary(dat)` shows counts of missing (`NA`) values

## Subsetting values from a data frame

- Subset by indexing rows and columns
- Use square brackets `[]` 
- Syntax is `dataframe[row, column]`
- This code returns the 2nd row, 3rd column (actually a 1x1 data frame with that value)

```{r}
dat[2, 3]
```

## Subsetting entire rows and columns

- Get an entire row by leaving the `column` part blank
- Get entire column by leaving the `row` part blank
- This gives us the 5th row:

```{r}
dat[5, ]
```

- This gives us the 2nd column:

```{r}
dat[, 2]
```

## Subsetting with ranges

- We can also subset with ranges
- For example this gives us the 6th through 10th rows, including all columns:

```{r}
dat[6:10, ]
```

- This gives us the first 5 rows, but only columns 1 and 2.

```{r}
dat[1:5, 1:2]
```

## Subsetting columns by name

- You can also get columns by name
- Pass the vector of column names using the `c()` function, and put quotes around the names 
- This gives us the 20th row and the columns called `taxonID` and `sex`.

```{r}
dat[20, c('taxonID', 'sex')]
```

- To extract a single column from a data frame as a vector, you can use the `$` operator. 

```{r}
dat$siteName
```

- If the data frame column name contains special characters, surround the name with backticks like `` dat$`column 10` ``.

## Passing data frame columns to functions

- Use the `$` operator to pass a single data frame column to a function as input
- For example, let's look at all unique values in the `siteName` column using the `unique()` function

```{r}
unique(dat$siteName)
```

- `table()` gives you the number of values of each category within a data frame column

```{r}
table(dat$sex)
```


## Subsetting with tidyverse functions: filter

- The tidyverse function `filter()` gives you subsets of rows
-  A common use of `filter()` is to subset rows by a condition
- For example we can use `filter()` to get all rows where `weight` is less than 10

```{r}
filter(dat, weight < 10)
```

## Subsetting with tidyverse functions: select

- `select()` gives you subsets of columns
- We do not need to use quotes on column names within `select()`

```{r}
select(dat, taxonID, weight)
```

## Calculating summary statistics

- Next we'll see how to get summary statistics for entire data frames and subgroups of data
- First we need to learn about how to deal with missing values

## Dealing with missing data

- Summary methods for data frames tell you how many missing values there are
- Many functions that calculate summary statistics return a `NA` value if there are any missing values

```{r}
x <- c(5.3, 12.2, -8.6)

max(x)

x[2] <- NA

max(x)
```

## Ignoring missing values

- Where there's data, there's missing data
- There are lots of ways to deal with missing data; the simplest is ignoring it
- Functions `mean()`, `min()`, `max()`, and `sum()` have an argument `na.rm` 
- If `na.rm = TRUE` it removes `NA` values before computing the summary statistic
- Default is `FALSE` so you need to explicitly set it to `TRUE` 

```{r}
max(x, na.rm = TRUE)
```

## The pipe operator

FIXME ALL BELOW HERE ISN'T DONE

- The pipe operator, or `%>%`, "pipes" the output of one function into the input of the next function
- Useful for composing expressions with many functions that are complicated but still readable

For instance take this nested function call

```
sqrt(log(abs(x)))
```

We start with a variable called `x`, take the absolute value with `abs()`, take the natural log with `log()`, then take the square root with `sqrt()`. But the order in which we do those operations is actually the opposite of what it appears in the code. We can use the `%>%` operator to make this code more readable. Not only are the operations printed in a logical order, but we can also easily split the code into multiple lines which is often easier for anyone who is reading your code to decipher. 

```
x %>%
  abs() %>%
  log() %>%
  sqrt()
```

> PROTIP: It's really "future you" who is going to be the one reading the code 99% of the time, so any time you spend a little time and effort
making your code more legible, you are actually saving yourself time in the long run ... even if you're the only one who ever looks at the code!


Let's calculate summary statistics for entire columns of a data frame. We're going to put the `%>%` pipe operator into practice now, to pass the output of one line of code to the next line.

```{r}
dat %>%
  summarize(mean_weight = mean(weight), 
            sd_weight = sd(weight))
```

As you can see this output is not helpful. All it tells us is that there is at least one missing (`NA`) value in the `weight` column. There are two ways we can deal with this.

One alternative is to subset the data frame using `filter()`, keeping only rows where weight is not missing. The function `is.na(x)` returns a vector of logical values, `TRUE` if `x` is missing and `FALSE` if it is not. We negate this with the `!` operator to get a vector that is `TRUE` if `weight` is not missing. Then we can calculate the summary statistics. This shows you how to use the `%>%` pipe to do two operations on a data frame at once.

```{r}
dat %>%
  filter(!is.na(weight)) %>%
  summarize(mean_weight = mean(weight), 
            sd_weight = sd(weight))
```

Or we can use `na.rm` as we demonstrated above. The result should be identical.

```{r}
dat %>%
  summarize(mean_weight = mean(weight, na.rm = TRUE), 
            sd_weight = sd(weight, na.rm = TRUE))
```


## Calculating summary statistics by group

You often want to calculate summary statistics for each group. We will use the `group_by()` function here to get the mean and standard deviation of body weight for each taxon ID.

```{r}
dat %>%
  filter(!is.na(weight)) %>%
  group_by(taxonID) %>%
  summarize(mean_weight = mean(weight), 
            sd_weight = sd(weight))
```

We can `filter()` by more than one condition, and `group_by()` more than one column. We can also put as many summary statistics in the call to `summarize()` as we want. For example we could get the number of values (using the `n()` function), the mean, and the standard deviation of all non-missing values of body weight for each combination of sex and life stage, for one particular species. (`PELE` = *Peromyscus leucopus*, the white-footed mouse).

```{r}
dat %>%
  filter(!is.na(weight), taxonID == 'PELE') %>%
  group_by(sex, lifeStage) %>%
  summarize(n_individuals = n(),
            mean_weight = mean(weight), 
            sd_weight = sd(weight))
```

Notice there are some `NA` values in the grouping columns. The `group_by()` function considers those to be separate groups. The `sd_weight` column also returns a `NA` value if you try to compute the sample standard deviation of a single value, which is undefined.

### More pipe!

We can use the pipe `%>%` operator to chain an arbitrarily long sequence of operations together. This makes for more readable code. 

```{r}
dat %>%
  filter(!is.na(weight), taxonID == 'PELE') %>%
  mutate(weight_mg = weight * 1000) %>%
  group_by(siteName) %>%
  summarize(mean_weight = mean(weight_mg)) %>%
  arrange(mean_weight)
```

> This is equivalent to `arrange(summarize(group_by(mutate(filter(dat)))))` but in my opinion much more readable.

I introduced two new functions here. One is the `mutate()` function, which can be used to change the value of a column or create a new column. For instance we can use it to convert the units of weight from g to mg, making a new column, `weight_mg`.

Here I'm also introducing the `arrange()` function, which sorts the data frame in ascending order by a given column or columns. `arrange(-mean_weight)` could be used to sort in descending order instead.

# Tidy data and reshaping data frames

We are almost done with this crash course in working with R data frames. We have two more functions to learn.

- `pivot_longer()`
- `pivot_wider()`

This set of examples is borrowed from Hadley Wickham's book *R for Data Science* ([Chapter 12: Tidy data](https://r4ds.had.co.nz/tidy-data.html)).

Tidy data is a dataset that is organized so that the following are true:

- Each observation has its own row.
- Each variable has its own column.
- Each value has its own cell.

Most of the model fitting functions in R require the data to be in this format (as well as many statistical procedures in SAS and other software).

All of the following data frames contain the same data: number of cases of a disease and total population, for three different countries (Afghanistan, Brazil, and China), in each of two years (1999 and 2000). Which of these data frames contain tidy data? 

> These are example datasets that come packaged with the **tidyr** package in R, part of the tidyverse.

```{r}
table1
table2
table3
```

Table 1 is the only "tidy" data frame out of the three. Each row includes all the variables from one observation: a count of disease cases and total population in a country in one specific year constitutes an observation here.

## Reshaping data

There are two main functions for reshaping data. One is `pivot_wider()` and the other is `pivot_longer()`. If we have data that looks like `table2`, and we want to make it into tidy form like `table1`, we will need to use `pivot_wider()`. We need to identify three components: 

- the `id_cols` column(s) which provide the identifying information for each observation, in this case the country and the year.
- the `names_from` column(s) which are the column or columns that contains the labels that will become names of individual columns in the wider version of the data frame
- the `values_from` column(s) which are the column or columns that contain the data that will be spread across multiple columns.

```{r}
table2_tidied <- pivot_wider(table2, id_cols = c(country, year), names_from = type, values_from = count)
```

Use the function `all.equal()` to confirm that the two are the same.

```{r}
all.equal(table2_tidied, table1)
```

It's also possible to reshape `table3` to `table1` but this requires more complex operations that we will not cover today. 

### Wide to long reshape

A common situation is that we will get data in a wide form from an Excel spreadsheet. When entering data into a spreadsheet manually, it's much easier to use a wide format because a long skinny table of data is very annoying to scroll through. Wide-form data is often how paper data sheets are formatted. So we often will need to reshape the data to a "longer" format to get an analysis-ready tidy dataset.

Here is an example: the billboard top 100 song rankings by week for the year 2000 (also an example dataset from the **tidyr** package). Use the data frame summary tools you now know to take a look at this dataset.

```{r}
billboard
```

We want tidy data where each row is an observation: a song identified by its artist name, track name, and the date it entered the top 100 ranking, the week at which the ranking was observed, and the ranking. We have to identify

- `cols`: the columns that need to be pivoted to a longer format. In this example we can use a shorthand `wk1:wk76` to refer to all columns between `wk1` and `wk76` inclusive. You can also use the `-` sign to specify which columns will *not* be pivoted (the identifying columns for each observation).
- `names_to`: the name of the column into which the column names will be put, as a quoted character string. (If you do not supply this, it will default to `name`.)
- `values_to`: the name of the column into which the data values in the cells will be put, as a quoted character string. (If you do not supply this, it will default to `value`.)

```{r}
pivot_longer(billboard, cols = c(wk1:wk76), names_to = 'week', values_to = 'ranking')
```

This is identical to the code above, instead we are specifying the columns *not* to pivot.

```{r}
pivot_longer(billboard, cols = -c(artist, track, date.entered), names_to = 'week', values_to = 'ranking')
```


# Hey! What about ...

- Joining two or more data frames together
- Operations on lists of data frames or data frames containing lists

Those are very important topics that you will definitely need to learn about if you want to do serious data analysis with R. We don't have time to cover them today but I would recommend using the R resources I posted on the workshop page to learn more about them. What we did just now only scratches the surface of how to wrangle data in R. 

